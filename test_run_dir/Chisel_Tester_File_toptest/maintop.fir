;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit maintop : 
  module Imem : 
    input clock : Clock
    input reset : Reset
    output io : {flip data_in : UInt<32>, flip enable : UInt<1>, flip address : UInt<32>, out : UInt<32>}
    
    cmem memory : UInt<32>[256] @[Imem.scala 14:17]
    when io.enable : @[Imem.scala 18:20]
      node _T = shr(io.address, 2) @[Imem.scala 19:26]
      node _T_1 = bits(_T, 7, 0)
      write mport MPORT = memory[_T_1], clock
      MPORT <= io.data_in
      skip @[Imem.scala 18:20]
    node _io_out_T = shr(io.address, 2) @[Imem.scala 21:35]
    node _io_out_T_1 = bits(_io_out_T, 7, 0) @[Imem.scala 21:22]
    read mport io_out_MPORT = memory[_io_out_T_1], clock @[Imem.scala 21:22]
    io.out <= io_out_MPORT @[Imem.scala 21:8]
    
  module datamemory : 
    input clock : Clock
    input reset : Reset
    output io : {out : UInt<8>[4], flip addr : UInt<8>, flip rd_enable : UInt<1>, flip wr_enable : UInt<1>, flip mask : UInt<1>[4], flip dataIn : UInt<8>[4]}
    
    io.out[0] <= UInt<1>("h00") @[datamemory.scala 16:13]
    io.out[1] <= UInt<1>("h00") @[datamemory.scala 17:13]
    io.out[2] <= UInt<1>("h00") @[datamemory.scala 18:13]
    io.out[3] <= UInt<1>("h00") @[datamemory.scala 19:13]
    cmem memory : UInt<8>[4][256] @[datamemory.scala 22:19]
    when io.wr_enable : @[datamemory.scala 25:22]
      write mport MPORT = memory[io.addr], clock
      when io.mask[0] :
        MPORT[0] <= io.dataIn[0]
        skip
      when io.mask[1] :
        MPORT[1] <= io.dataIn[1]
        skip
      when io.mask[2] :
        MPORT[2] <= io.dataIn[2]
        skip
      when io.mask[3] :
        MPORT[3] <= io.dataIn[3]
        skip
      skip @[datamemory.scala 25:22]
    when io.rd_enable : @[datamemory.scala 28:22]
      read mport MPORT_1 = memory[io.addr], clock @[datamemory.scala 29:26]
      io.out[0] <= MPORT_1[0] @[datamemory.scala 29:12]
      io.out[1] <= MPORT_1[1] @[datamemory.scala 29:12]
      io.out[2] <= MPORT_1[2] @[datamemory.scala 29:12]
      io.out[3] <= MPORT_1[3] @[datamemory.scala 29:12]
      skip @[datamemory.scala 28:22]
    
  module pc : 
    input clock : Clock
    input reset : Reset
    output io : {flip imm : UInt<32>, out : UInt<32>, flip jump : UInt<1>, flip jump2 : UInt<1>, flip jump3 : UInt<1>}
    
    io.out <= UInt<1>("h00") @[pc.scala 16:10]
    reg pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[pc.scala 18:19]
    when io.jump : @[pc.scala 20:14]
      pc <= io.imm @[pc.scala 21:4]
      skip @[pc.scala 20:14]
    else : @[pc.scala 23:11]
      node _pc_T = add(pc, UInt<3>("h04")) @[pc.scala 24:11]
      node _pc_T_1 = tail(_pc_T, 1) @[pc.scala 24:11]
      pc <= _pc_T_1 @[pc.scala 24:4]
      skip @[pc.scala 23:11]
    node _T = eq(pc, UInt<11>("h0400")) @[pc.scala 26:9]
    when _T : @[pc.scala 26:17]
      pc <= UInt<1>("h00") @[pc.scala 27:4]
      skip @[pc.scala 26:17]
    when io.jump2 : @[pc.scala 29:16]
      pc <= io.imm @[pc.scala 31:4]
      skip @[pc.scala 29:16]
    when io.jump3 : @[pc.scala 34:16]
      pc <= io.imm @[pc.scala 35:4]
      skip @[pc.scala 34:16]
    io.out <= pc @[pc.scala 38:8]
    
  module fetch : 
    input clock : Clock
    input reset : Reset
    output io : {flip imm : UInt<32>, pcout : UInt<32>, flip jump : UInt<1>, flip jump2 : UInt<1>, flip jump3 : UInt<1>}
    
    inst pcmod of pc @[fetch.scala 34:19]
    pcmod.clock <= clock
    pcmod.reset <= reset
    pcmod.io.imm <= io.imm @[fetch.scala 43:14]
    pcmod.io.jump <= io.jump @[fetch.scala 44:14]
    pcmod.io.jump2 <= io.jump2 @[fetch.scala 45:15]
    pcmod.io.jump3 <= io.jump3 @[fetch.scala 46:15]
    io.pcout <= pcmod.io.out @[fetch.scala 49:10]
    
  module alu : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : UInt<32>, flip B : UInt<32>, flip op : UInt<4>, out : UInt<32>}
    
    io.out <= UInt<1>("h00") @[alu.scala 27:9]
    node shiftamount = bits(io.B, 4, 0) @[alu.scala 28:25]
    io.out <= UInt<1>("h00") @[alu.scala 29:10]
    node _T = eq(UInt<4>("h00"), io.op) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _io_out_T = add(io.A, io.B) @[alu.scala 32:22]
      node _io_out_T_1 = tail(_io_out_T, 1) @[alu.scala 32:22]
      io.out <= _io_out_T_1 @[alu.scala 32:14]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<4>("h08"), io.op) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _io_out_T_2 = sub(io.A, io.B) @[alu.scala 35:22]
        node _io_out_T_3 = tail(_io_out_T_2, 1) @[alu.scala 35:22]
        io.out <= _io_out_T_3 @[alu.scala 35:14]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<4>("h07"), io.op) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _io_out_T_4 = and(io.A, io.B) @[alu.scala 38:22]
          io.out <= _io_out_T_4 @[alu.scala 38:14]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<4>("h06"), io.op) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            node _io_out_T_5 = or(io.A, io.B) @[alu.scala 41:22]
            io.out <= _io_out_T_5 @[alu.scala 41:14]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<4>("h04"), io.op) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              node _io_out_T_6 = xor(io.A, io.B) @[alu.scala 44:22]
              io.out <= _io_out_T_6 @[alu.scala 44:14]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<4>("h02"), io.op) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                node _T_6 = lt(io.A, io.B) @[alu.scala 47:18]
                when _T_6 : @[alu.scala 47:26]
                  io.out <= UInt<1>("h01") @[alu.scala 48:16]
                  skip @[alu.scala 47:26]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_7 = eq(UInt<4>("h01"), io.op) @[Conditional.scala 37:30]
                when _T_7 : @[Conditional.scala 39:67]
                  node _io_out_T_7 = dshl(io.A, shiftamount) @[alu.scala 52:22]
                  io.out <= _io_out_T_7 @[alu.scala 52:14]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_8 = eq(UInt<4>("h03"), io.op) @[Conditional.scala 37:30]
                  when _T_8 : @[Conditional.scala 39:67]
                    node _T_9 = lt(io.A, io.B) @[alu.scala 58:18]
                    when _T_9 : @[alu.scala 58:25]
                      io.out <= UInt<1>("h01") @[alu.scala 59:16]
                      skip @[alu.scala 58:25]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_10 = eq(UInt<4>("h05"), io.op) @[Conditional.scala 37:30]
                    when _T_10 : @[Conditional.scala 39:67]
                      node _io_out_T_8 = dshr(io.A, shiftamount) @[alu.scala 66:22]
                      io.out <= _io_out_T_8 @[alu.scala 66:15]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_11 = eq(UInt<4>("h0d"), io.op) @[Conditional.scala 37:30]
                      when _T_11 : @[Conditional.scala 39:67]
                        node _io_out_T_9 = asSInt(io.A) @[alu.scala 69:17]
                        node _io_out_T_10 = dshr(_io_out_T_9, shiftamount) @[alu.scala 69:23]
                        node _io_out_T_11 = asUInt(_io_out_T_10) @[alu.scala 69:38]
                        io.out <= _io_out_T_11 @[alu.scala 69:9]
                        skip @[Conditional.scala 39:67]
    
  module execute : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : UInt<32>, flip B : UInt<32>, flip op : UInt<4>, out : UInt<32>, flip rdata1 : UInt<32>, flip rdata2 : UInt<32>, wdata : UInt<32>, flip instructioncu : UInt<32>, flip func3_7 : UInt<3>, flip immg : UInt<32>, flip pcout : UInt<32>, aluout : UInt<32>, pcjump : UInt<1>, pcjump2 : UInt<1>, pcjump3 : UInt<1>, addr : UInt<8>}
    
    inst alumod of alu @[execute.scala 58:20]
    alumod.clock <= clock
    alumod.reset <= reset
    io.pcjump3 <= UInt<1>("h00") @[execute.scala 60:12]
    io.pcjump2 <= UInt<1>("h00") @[execute.scala 61:12]
    io.pcjump <= UInt<1>("h00") @[execute.scala 62:12]
    alumod.io.A <= io.rdata1 @[execute.scala 68:13]
    alumod.io.B <= io.rdata2 @[execute.scala 69:13]
    alumod.io.op <= io.func3_7 @[execute.scala 70:13]
    io.out <= alumod.io.out @[execute.scala 71:10]
    io.wdata <= alumod.io.out @[execute.scala 73:10]
    io.aluout <= alumod.io.out @[execute.scala 74:11]
    io.addr <= UInt<1>("h00") @[execute.scala 76:9]
    node _T = bits(io.instructioncu, 6, 0) @[execute.scala 77:22]
    node _T_1 = eq(_T, UInt<2>("h03")) @[execute.scala 77:28]
    when _T_1 : @[execute.scala 78:1]
      alumod.io.A <= io.A @[execute.scala 79:14]
      alumod.io.B <= io.B @[execute.scala 80:14]
      alumod.io.op <= UInt<1>("h00") @[execute.scala 81:15]
      node _io_addr_T = bits(alumod.io.out, 9, 2) @[execute.scala 82:27]
      io.addr <= _io_addr_T @[execute.scala 82:11]
      skip @[execute.scala 78:1]
    else : @[execute.scala 84:1]
      node _T_2 = eq(io.instructioncu, UInt<6>("h023")) @[execute.scala 83:29]
      when _T_2 : @[execute.scala 84:1]
        alumod.io.A <= io.A @[execute.scala 85:14]
        alumod.io.B <= io.B @[execute.scala 86:14]
        alumod.io.op <= UInt<1>("h00") @[execute.scala 87:15]
        node _io_addr_T_1 = bits(alumod.io.out, 9, 2) @[execute.scala 88:27]
        io.addr <= _io_addr_T_1 @[execute.scala 88:11]
        skip @[execute.scala 84:1]
    node _T_3 = bits(io.instructioncu, 6, 0) @[execute.scala 98:22]
    node _T_4 = eq(_T_3, UInt<6>("h033")) @[execute.scala 98:28]
    when _T_4 : @[execute.scala 98:41]
      alumod.io.B <= io.rdata2 @[execute.scala 100:13]
      skip @[execute.scala 98:41]
    else : @[execute.scala 102:45]
      node _T_5 = bits(io.instructioncu, 6, 0) @[execute.scala 102:27]
      node _T_6 = eq(_T_5, UInt<5>("h013")) @[execute.scala 102:33]
      when _T_6 : @[execute.scala 102:45]
        alumod.io.B <= io.immg @[execute.scala 103:13]
        skip @[execute.scala 102:45]
    node _T_7 = bits(io.instructioncu, 6, 0) @[execute.scala 108:22]
    node _T_8 = eq(_T_7, UInt<7>("h063")) @[execute.scala 108:29]
    when _T_8 : @[execute.scala 108:39]
      alumod.io.op <= UInt<1>("h00") @[execute.scala 109:15]
      alumod.io.A <= io.pcout @[execute.scala 110:15]
      alumod.io.B <= io.immg @[execute.scala 111:15]
      io.aluout <= alumod.io.out @[execute.scala 117:15]
      node _T_9 = bits(io.instructioncu, 14, 12) @[execute.scala 118:26]
      node _T_10 = eq(_T_9, UInt<1>("h00")) @[execute.scala 118:35]
      when _T_10 : @[execute.scala 118:44]
        node _T_11 = eq(io.rdata1, io.rdata2) @[execute.scala 119:22]
        when _T_11 : @[execute.scala 119:37]
          io.pcjump <= UInt<1>("h01") @[execute.scala 120:17]
          skip @[execute.scala 119:37]
        skip @[execute.scala 118:44]
      else : @[execute.scala 122:50]
        node _T_12 = bits(io.instructioncu, 14, 12) @[execute.scala 122:32]
        node _T_13 = eq(_T_12, UInt<1>("h01")) @[execute.scala 122:41]
        when _T_13 : @[execute.scala 122:50]
          node _T_14 = neq(io.rdata1, io.rdata2) @[execute.scala 123:22]
          when _T_14 : @[execute.scala 123:37]
            io.pcjump <= UInt<1>("h01") @[execute.scala 124:19]
            skip @[execute.scala 123:37]
          skip @[execute.scala 122:50]
        else : @[execute.scala 126:50]
          node _T_15 = bits(io.instructioncu, 14, 12) @[execute.scala 126:32]
          node _T_16 = eq(_T_15, UInt<2>("h02")) @[execute.scala 126:41]
          when _T_16 : @[execute.scala 126:50]
            node _T_17 = lt(io.rdata1, io.rdata2) @[execute.scala 127:22]
            when _T_17 : @[execute.scala 127:35]
              io.pcjump <= UInt<1>("h01") @[execute.scala 128:19]
              skip @[execute.scala 127:35]
            skip @[execute.scala 126:50]
          else : @[execute.scala 130:50]
            node _T_18 = bits(io.instructioncu, 14, 12) @[execute.scala 130:32]
            node _T_19 = eq(_T_18, UInt<2>("h03")) @[execute.scala 130:41]
            when _T_19 : @[execute.scala 130:50]
              node _T_20 = geq(io.rdata1, io.rdata2) @[execute.scala 131:22]
              when _T_20 : @[execute.scala 131:36]
                io.pcjump <= UInt<1>("h01") @[execute.scala 132:19]
                skip @[execute.scala 131:36]
              skip @[execute.scala 130:50]
            else : @[execute.scala 134:50]
              node _T_21 = bits(io.instructioncu, 14, 12) @[execute.scala 134:32]
              node _T_22 = eq(_T_21, UInt<3>("h04")) @[execute.scala 134:41]
              when _T_22 : @[execute.scala 134:50]
                node _T_23 = lt(io.rdata1, io.rdata2) @[execute.scala 135:29]
                when _T_23 : @[execute.scala 135:51]
                  io.pcjump <= UInt<1>("h01") @[execute.scala 136:19]
                  skip @[execute.scala 135:51]
                skip @[execute.scala 134:50]
              else : @[execute.scala 138:50]
                node _T_24 = bits(io.instructioncu, 14, 12) @[execute.scala 138:32]
                node _T_25 = eq(_T_24, UInt<3>("h05")) @[execute.scala 138:41]
                when _T_25 : @[execute.scala 138:50]
                  node _T_26 = geq(io.rdata1, io.rdata2) @[execute.scala 139:29]
                  when _T_26 : @[execute.scala 139:52]
                    io.pcjump <= UInt<1>("h01") @[execute.scala 140:19]
                    skip @[execute.scala 139:52]
                  skip @[execute.scala 138:50]
      skip @[execute.scala 108:39]
    node _T_27 = bits(io.instructioncu, 6, 0) @[execute.scala 147:22]
    node _T_28 = eq(_T_27, UInt<6>("h037")) @[execute.scala 147:28]
    when _T_28 : @[execute.scala 147:41]
      io.wdata <= io.immg @[execute.scala 148:10]
      skip @[execute.scala 147:41]
    node _T_29 = bits(io.instructioncu, 6, 0) @[execute.scala 150:22]
    node _T_30 = eq(_T_29, UInt<5>("h017")) @[execute.scala 150:28]
    when _T_30 : @[execute.scala 150:41]
      alumod.io.op <= UInt<1>("h00") @[execute.scala 151:13]
      alumod.io.A <= io.pcout @[execute.scala 152:15]
      alumod.io.B <= io.immg @[execute.scala 153:15]
      io.wdata <= alumod.io.out @[execute.scala 155:10]
      skip @[execute.scala 150:41]
    node _T_31 = bits(io.instructioncu, 6, 0) @[execute.scala 160:22]
    node _T_32 = eq(_T_31, UInt<7>("h06f")) @[execute.scala 160:28]
    when _T_32 : @[execute.scala 160:40]
      io.pcjump2 <= UInt<1>("h01") @[execute.scala 161:14]
      alumod.io.op <= UInt<1>("h00") @[execute.scala 163:15]
      alumod.io.A <= io.pcout @[execute.scala 164:15]
      alumod.io.B <= io.immg @[execute.scala 165:15]
      node _io_wdata_T = add(io.pcout, UInt<3>("h04")) @[execute.scala 168:26]
      node _io_wdata_T_1 = tail(_io_wdata_T, 1) @[execute.scala 168:26]
      io.wdata <= _io_wdata_T_1 @[execute.scala 168:12]
      io.aluout <= alumod.io.out @[execute.scala 169:13]
      skip @[execute.scala 160:40]
    node _T_33 = bits(io.instructioncu, 6, 0) @[execute.scala 172:22]
    node _T_34 = eq(_T_33, UInt<7>("h067")) @[execute.scala 172:28]
    when _T_34 : @[execute.scala 172:40]
      io.pcjump3 <= UInt<1>("h01") @[execute.scala 173:14]
      alumod.io.op <= UInt<1>("h00") @[execute.scala 175:15]
      alumod.io.A <= io.rdata1 @[execute.scala 176:13]
      alumod.io.B <= io.immg @[execute.scala 177:15]
      node _io_wdata_T_2 = add(io.pcout, UInt<3>("h04")) @[execute.scala 180:26]
      node _io_wdata_T_3 = tail(_io_wdata_T_2, 1) @[execute.scala 180:26]
      io.wdata <= _io_wdata_T_3 @[execute.scala 180:12]
      io.aluout <= alumod.io.out @[execute.scala 181:13]
      skip @[execute.scala 172:40]
    
  module wb : 
    input clock : Clock
    input reset : Reset
    output io : {dataout : UInt<32>, flip datamemin : UInt<32>, flip ins : UInt<32>}
    
    node _io_dataout_T = bits(io.ins, 6, 0) @[wb.scala 19:26]
    node _io_dataout_T_1 = eq(_io_dataout_T, UInt<2>("h03")) @[wb.scala 19:31]
    node _io_dataout_T_2 = mux(_io_dataout_T_1, io.datamemin, UInt<1>("h00")) @[wb.scala 19:19]
    io.dataout <= _io_dataout_T_2 @[wb.scala 19:13]
    
  module mem : 
    input clock : Clock
    input reset : Reset
    output io : {addr : UInt<8>, mask : UInt<1>[4], dataIn : UInt<8>[4], flip out : UInt<8>[4], flip instruction : UInt<32>, A : UInt<32>, B : UInt<32>, op : UInt<4>, flip aluout : UInt<32>, flip imm : UInt<32>, flip rdata1 : UInt<32>, flip rdata2 : UInt<32>, wdata : UInt<32>}
    
    io.A <= UInt<1>("h00") @[mem.scala 41:8]
    io.B <= UInt<1>("h00") @[mem.scala 42:8]
    io.op <= UInt<1>("h00") @[mem.scala 43:8]
    io.addr <= UInt<1>("h00") @[mem.scala 48:8]
    io.wdata <= io.aluout @[mem.scala 51:10]
    io.dataIn[0] <= UInt<1>("h00") @[mem.scala 54:14]
    io.dataIn[1] <= UInt<1>("h00") @[mem.scala 55:14]
    io.dataIn[2] <= UInt<1>("h00") @[mem.scala 56:14]
    io.dataIn[3] <= UInt<1>("h00") @[mem.scala 57:14]
    io.mask[0] <= UInt<1>("h00") @[mem.scala 74:12]
    io.mask[1] <= UInt<1>("h00") @[mem.scala 75:12]
    io.mask[2] <= UInt<1>("h00") @[mem.scala 76:12]
    io.mask[3] <= UInt<1>("h00") @[mem.scala 77:12]
    node _T = bits(io.instruction, 6, 0) @[mem.scala 86:20]
    node _T_1 = eq(_T, UInt<6>("h023")) @[mem.scala 86:26]
    when _T_1 : @[mem.scala 86:39]
      io.op <= UInt<1>("h00") @[mem.scala 87:8]
      io.A <= io.rdata1 @[mem.scala 88:8]
      io.B <= io.imm @[mem.scala 89:8]
      node _io_addr_T = bits(io.aluout, 9, 2) @[mem.scala 92:23]
      io.addr <= _io_addr_T @[mem.scala 92:11]
      node masksel = bits(io.aluout, 1, 0) @[mem.scala 94:26]
      node _T_2 = bits(io.instruction, 14, 12) @[mem.scala 96:22]
      node _T_3 = eq(_T_2, UInt<1>("h00")) @[mem.scala 96:30]
      when _T_3 : @[mem.scala 96:38]
        node _T_4 = eq(masksel, UInt<1>("h00")) @[mem.scala 98:18]
        when _T_4 : @[mem.scala 99:7]
          io.mask[0] <= UInt<1>("h01") @[mem.scala 100:20]
          io.mask[1] <= UInt<1>("h00") @[mem.scala 101:20]
          io.mask[2] <= UInt<1>("h00") @[mem.scala 102:20]
          io.mask[3] <= UInt<1>("h00") @[mem.scala 103:20]
          node _io_dataIn_0_T = bits(io.rdata2, 7, 0) @[mem.scala 105:34]
          io.dataIn[0] <= _io_dataIn_0_T @[mem.scala 105:22]
          skip @[mem.scala 99:7]
        else : @[mem.scala 112:7]
          node _T_5 = eq(masksel, UInt<1>("h01")) @[mem.scala 111:25]
          when _T_5 : @[mem.scala 112:7]
            io.mask[0] <= UInt<1>("h00") @[mem.scala 113:20]
            io.mask[1] <= UInt<1>("h01") @[mem.scala 114:20]
            io.mask[2] <= UInt<1>("h00") @[mem.scala 115:20]
            io.mask[3] <= UInt<1>("h00") @[mem.scala 116:20]
            node _io_dataIn_1_T = bits(io.rdata2, 7, 0) @[mem.scala 119:32]
            io.dataIn[1] <= _io_dataIn_1_T @[mem.scala 119:20]
            skip @[mem.scala 112:7]
          else : @[mem.scala 125:7]
            node _T_6 = eq(masksel, UInt<2>("h02")) @[mem.scala 124:25]
            when _T_6 : @[mem.scala 125:7]
              io.mask[0] <= UInt<1>("h00") @[mem.scala 126:20]
              io.mask[1] <= UInt<1>("h00") @[mem.scala 127:20]
              io.mask[2] <= UInt<1>("h01") @[mem.scala 128:20]
              io.mask[3] <= UInt<1>("h00") @[mem.scala 129:20]
              node _io_dataIn_2_T = bits(io.rdata2, 7, 0) @[mem.scala 133:34]
              io.dataIn[2] <= _io_dataIn_2_T @[mem.scala 133:22]
              skip @[mem.scala 125:7]
            else : @[mem.scala 138:7]
              node _T_7 = eq(masksel, UInt<2>("h03")) @[mem.scala 137:25]
              when _T_7 : @[mem.scala 138:7]
                io.mask[0] <= UInt<1>("h00") @[mem.scala 139:20]
                io.mask[1] <= UInt<1>("h00") @[mem.scala 140:20]
                io.mask[2] <= UInt<1>("h00") @[mem.scala 141:20]
                io.mask[3] <= UInt<1>("h01") @[mem.scala 142:20]
                node _io_dataIn_3_T = bits(io.rdata2, 7, 0) @[mem.scala 147:34]
                io.dataIn[3] <= _io_dataIn_3_T @[mem.scala 147:22]
                skip @[mem.scala 138:7]
        skip @[mem.scala 96:38]
      else : @[mem.scala 152:44]
        node _T_8 = bits(io.instruction, 14, 12) @[mem.scala 152:28]
        node _T_9 = eq(_T_8, UInt<1>("h01")) @[mem.scala 152:36]
        when _T_9 : @[mem.scala 152:44]
          node _T_10 = eq(masksel, UInt<1>("h00")) @[mem.scala 154:16]
          when _T_10 : @[mem.scala 155:7]
            io.mask[0] <= UInt<1>("h01") @[mem.scala 156:20]
            io.mask[1] <= UInt<1>("h01") @[mem.scala 157:20]
            io.mask[2] <= UInt<1>("h00") @[mem.scala 158:20]
            io.mask[3] <= UInt<1>("h00") @[mem.scala 159:20]
            node _io_dataIn_0_T_1 = bits(io.rdata2, 7, 0) @[mem.scala 161:34]
            io.dataIn[0] <= _io_dataIn_0_T_1 @[mem.scala 161:22]
            node _io_dataIn_1_T_1 = bits(io.rdata2, 15, 8) @[mem.scala 162:34]
            io.dataIn[1] <= _io_dataIn_1_T_1 @[mem.scala 162:22]
            skip @[mem.scala 155:7]
          node _T_11 = eq(masksel, UInt<1>("h01")) @[mem.scala 169:16]
          when _T_11 : @[mem.scala 170:7]
            io.mask[0] <= UInt<1>("h00") @[mem.scala 171:20]
            io.mask[1] <= UInt<1>("h01") @[mem.scala 172:20]
            io.mask[2] <= UInt<1>("h01") @[mem.scala 173:20]
            io.mask[3] <= UInt<1>("h00") @[mem.scala 174:20]
            node _io_dataIn_1_T_2 = bits(io.rdata2, 7, 0) @[mem.scala 177:34]
            io.dataIn[1] <= _io_dataIn_1_T_2 @[mem.scala 177:22]
            node _io_dataIn_2_T_1 = bits(io.rdata2, 15, 8) @[mem.scala 178:34]
            io.dataIn[2] <= _io_dataIn_2_T_1 @[mem.scala 178:22]
            skip @[mem.scala 170:7]
          node _T_12 = eq(masksel, UInt<2>("h02")) @[mem.scala 183:15]
          when _T_12 : @[mem.scala 184:7]
            io.mask[0] <= UInt<1>("h00") @[mem.scala 185:20]
            io.mask[1] <= UInt<1>("h00") @[mem.scala 186:20]
            io.mask[2] <= UInt<1>("h01") @[mem.scala 187:20]
            io.mask[3] <= UInt<1>("h01") @[mem.scala 188:20]
            node _io_dataIn_2_T_2 = bits(io.rdata2, 7, 0) @[mem.scala 192:34]
            io.dataIn[2] <= _io_dataIn_2_T_2 @[mem.scala 192:22]
            node _io_dataIn_3_T_1 = bits(io.rdata2, 15, 8) @[mem.scala 193:34]
            io.dataIn[3] <= _io_dataIn_3_T_1 @[mem.scala 193:22]
            skip @[mem.scala 184:7]
          node _T_13 = eq(masksel, UInt<2>("h03")) @[mem.scala 197:21]
          when _T_13 : @[mem.scala 198:7]
            io.mask[0] <= UInt<1>("h01") @[mem.scala 199:20]
            io.mask[1] <= UInt<1>("h00") @[mem.scala 200:20]
            io.mask[2] <= UInt<1>("h00") @[mem.scala 201:20]
            io.mask[3] <= UInt<1>("h01") @[mem.scala 202:20]
            node _io_dataIn_0_T_2 = bits(io.rdata2, 15, 8) @[mem.scala 204:34]
            io.dataIn[0] <= _io_dataIn_0_T_2 @[mem.scala 204:22]
            node _io_dataIn_3_T_2 = bits(io.rdata2, 7, 0) @[mem.scala 207:34]
            io.dataIn[3] <= _io_dataIn_3_T_2 @[mem.scala 207:22]
            skip @[mem.scala 198:7]
          skip @[mem.scala 152:44]
        else : @[mem.scala 211:44]
          node _T_14 = bits(io.instruction, 14, 12) @[mem.scala 211:28]
          node _T_15 = eq(_T_14, UInt<2>("h02")) @[mem.scala 211:36]
          when _T_15 : @[mem.scala 211:44]
            io.mask[0] <= UInt<1>("h01") @[mem.scala 215:20]
            io.mask[1] <= UInt<1>("h01") @[mem.scala 216:20]
            io.mask[2] <= UInt<1>("h01") @[mem.scala 217:20]
            io.mask[3] <= UInt<1>("h01") @[mem.scala 218:20]
            node _io_dataIn_0_T_3 = bits(io.rdata2, 7, 0) @[mem.scala 220:34]
            io.dataIn[0] <= _io_dataIn_0_T_3 @[mem.scala 220:22]
            node _io_dataIn_1_T_3 = bits(io.rdata2, 15, 8) @[mem.scala 221:34]
            io.dataIn[1] <= _io_dataIn_1_T_3 @[mem.scala 221:22]
            node _io_dataIn_2_T_3 = bits(io.rdata2, 23, 16) @[mem.scala 222:34]
            io.dataIn[2] <= _io_dataIn_2_T_3 @[mem.scala 222:22]
            node _io_dataIn_3_T_3 = bits(io.rdata2, 31, 24) @[mem.scala 223:34]
            io.dataIn[3] <= _io_dataIn_3_T_3 @[mem.scala 223:22]
            skip @[mem.scala 211:44]
      skip @[mem.scala 86:39]
    node _T_16 = bits(io.instruction, 6, 0) @[mem.scala 233:20]
    node _T_17 = eq(_T_16, UInt<2>("h03")) @[mem.scala 233:26]
    when _T_17 : @[mem.scala 233:38]
      io.op <= UInt<1>("h00") @[mem.scala 234:8]
      io.A <= io.rdata1 @[mem.scala 236:8]
      io.B <= io.imm @[mem.scala 237:8]
      node _io_addr_T_1 = bits(io.aluout, 9, 2) @[mem.scala 239:23]
      io.addr <= _io_addr_T_1 @[mem.scala 239:11]
      node masksel_1 = bits(io.aluout, 1, 0) @[mem.scala 241:30]
      node _T_18 = bits(io.instruction, 14, 12) @[mem.scala 243:24]
      node _T_19 = eq(_T_18, UInt<1>("h00")) @[mem.scala 243:32]
      when _T_19 : @[mem.scala 243:46]
        node _T_20 = eq(masksel_1, UInt<1>("h00")) @[mem.scala 246:17]
        when _T_20 : @[mem.scala 246:25]
          node _io_wdata_T = bits(io.out[0], 7, 7) @[mem.scala 247:42]
          node _io_wdata_T_1 = bits(_io_wdata_T, 0, 0) @[Bitwise.scala 72:15]
          node io_wdata_hi = mux(_io_wdata_T_1, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
          node _io_wdata_T_2 = cat(io_wdata_hi, io.out[0]) @[Cat.scala 30:58]
          io.wdata <= _io_wdata_T_2 @[mem.scala 247:16]
          skip @[mem.scala 246:25]
        else : @[mem.scala 248:32]
          node _T_21 = eq(masksel_1, UInt<1>("h01")) @[mem.scala 248:24]
          when _T_21 : @[mem.scala 248:32]
            node _io_wdata_T_3 = bits(io.out[1], 7, 7) @[mem.scala 249:42]
            node _io_wdata_T_4 = bits(_io_wdata_T_3, 0, 0) @[Bitwise.scala 72:15]
            node io_wdata_hi_1 = mux(_io_wdata_T_4, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
            node _io_wdata_T_5 = cat(io_wdata_hi_1, io.out[1]) @[Cat.scala 30:58]
            io.wdata <= _io_wdata_T_5 @[mem.scala 249:16]
            skip @[mem.scala 248:32]
          else : @[mem.scala 250:32]
            node _T_22 = eq(masksel_1, UInt<2>("h02")) @[mem.scala 250:24]
            when _T_22 : @[mem.scala 250:32]
              node _io_wdata_T_6 = bits(io.out[2], 7, 7) @[mem.scala 251:42]
              node _io_wdata_T_7 = bits(_io_wdata_T_6, 0, 0) @[Bitwise.scala 72:15]
              node io_wdata_hi_2 = mux(_io_wdata_T_7, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
              node _io_wdata_T_8 = cat(io_wdata_hi_2, io.out[2]) @[Cat.scala 30:58]
              io.wdata <= _io_wdata_T_8 @[mem.scala 251:16]
              skip @[mem.scala 250:32]
            else : @[mem.scala 252:32]
              node _T_23 = eq(masksel_1, UInt<2>("h03")) @[mem.scala 252:24]
              when _T_23 : @[mem.scala 252:32]
                node _io_wdata_T_9 = bits(io.out[3], 7, 7) @[mem.scala 253:42]
                node _io_wdata_T_10 = bits(_io_wdata_T_9, 0, 0) @[Bitwise.scala 72:15]
                node io_wdata_hi_3 = mux(_io_wdata_T_10, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                node _io_wdata_T_11 = cat(io_wdata_hi_3, io.out[3]) @[Cat.scala 30:58]
                io.wdata <= _io_wdata_T_11 @[mem.scala 253:16]
                skip @[mem.scala 252:32]
        skip @[mem.scala 243:46]
      else : @[mem.scala 256:52]
        node _T_24 = bits(io.instruction, 14, 12) @[mem.scala 256:30]
        node _T_25 = eq(_T_24, UInt<1>("h01")) @[mem.scala 256:38]
        when _T_25 : @[mem.scala 256:52]
          node _T_26 = eq(masksel_1, UInt<1>("h00")) @[mem.scala 258:20]
          when _T_26 : @[mem.scala 258:28]
            node _io_wdata_T_12 = bits(io.out[1], 7, 7) @[mem.scala 259:42]
            node _io_wdata_T_13 = bits(_io_wdata_T_12, 0, 0) @[Bitwise.scala 72:15]
            node io_wdata_hi_hi = mux(_io_wdata_T_13, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
            node io_wdata_hi_4 = cat(io_wdata_hi_hi, io.out[1]) @[Cat.scala 30:58]
            node _io_wdata_T_14 = cat(io_wdata_hi_4, io.out[0]) @[Cat.scala 30:58]
            io.wdata <= _io_wdata_T_14 @[mem.scala 259:16]
            skip @[mem.scala 258:28]
          else : @[mem.scala 260:32]
            node _T_27 = eq(masksel_1, UInt<1>("h01")) @[mem.scala 260:24]
            when _T_27 : @[mem.scala 260:32]
              node _io_wdata_T_15 = bits(io.out[2], 7, 7) @[mem.scala 261:42]
              node _io_wdata_T_16 = bits(_io_wdata_T_15, 0, 0) @[Bitwise.scala 72:15]
              node io_wdata_hi_hi_1 = mux(_io_wdata_T_16, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
              node io_wdata_hi_5 = cat(io_wdata_hi_hi_1, io.out[2]) @[Cat.scala 30:58]
              node _io_wdata_T_17 = cat(io_wdata_hi_5, io.out[1]) @[Cat.scala 30:58]
              io.wdata <= _io_wdata_T_17 @[mem.scala 261:16]
              skip @[mem.scala 260:32]
            else : @[mem.scala 262:32]
              node _T_28 = eq(masksel_1, UInt<2>("h02")) @[mem.scala 262:24]
              when _T_28 : @[mem.scala 262:32]
                node _io_wdata_T_18 = bits(io.out[3], 7, 7) @[mem.scala 263:42]
                node _io_wdata_T_19 = bits(_io_wdata_T_18, 0, 0) @[Bitwise.scala 72:15]
                node io_wdata_hi_hi_2 = mux(_io_wdata_T_19, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                node io_wdata_hi_6 = cat(io_wdata_hi_hi_2, io.out[3]) @[Cat.scala 30:58]
                node _io_wdata_T_20 = cat(io_wdata_hi_6, io.out[2]) @[Cat.scala 30:58]
                io.wdata <= _io_wdata_T_20 @[mem.scala 263:16]
                skip @[mem.scala 262:32]
              else : @[mem.scala 264:32]
                node _T_29 = eq(masksel_1, UInt<2>("h03")) @[mem.scala 264:24]
                when _T_29 : @[mem.scala 264:32]
                  node _io_wdata_T_21 = bits(io.out[0], 7, 7) @[mem.scala 265:42]
                  node _io_wdata_T_22 = bits(_io_wdata_T_21, 0, 0) @[Bitwise.scala 72:15]
                  node io_wdata_hi_hi_3 = mux(_io_wdata_T_22, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                  node io_wdata_hi_7 = cat(io_wdata_hi_hi_3, io.out[0]) @[Cat.scala 30:58]
                  node _io_wdata_T_23 = cat(io_wdata_hi_7, io.out[3]) @[Cat.scala 30:58]
                  io.wdata <= _io_wdata_T_23 @[mem.scala 265:16]
                  skip @[mem.scala 264:32]
          skip @[mem.scala 256:52]
        else : @[mem.scala 270:52]
          node _T_30 = bits(io.instruction, 14, 12) @[mem.scala 270:30]
          node _T_31 = eq(_T_30, UInt<2>("h02")) @[mem.scala 270:38]
          when _T_31 : @[mem.scala 270:52]
            node io_wdata_lo = cat(io.out[1], io.out[0]) @[Cat.scala 30:58]
            node io_wdata_hi_8 = cat(io.out[3], io.out[2]) @[Cat.scala 30:58]
            node _io_wdata_T_24 = cat(io_wdata_hi_8, io_wdata_lo) @[Cat.scala 30:58]
            io.wdata <= _io_wdata_T_24 @[mem.scala 271:16]
            skip @[mem.scala 270:52]
          else : @[mem.scala 274:52]
            node _T_32 = bits(io.instruction, 14, 12) @[mem.scala 274:30]
            node _T_33 = eq(_T_32, UInt<3>("h04")) @[mem.scala 274:38]
            when _T_33 : @[mem.scala 274:52]
              node _T_34 = eq(masksel_1, UInt<1>("h00")) @[mem.scala 276:19]
              when _T_34 : @[mem.scala 276:27]
                node _io_wdata_T_25 = bits(io.out[0], 7, 7) @[mem.scala 277:42]
                node _io_wdata_T_26 = bits(_io_wdata_T_25, 0, 0) @[Bitwise.scala 72:15]
                node io_wdata_hi_9 = mux(_io_wdata_T_26, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                node _io_wdata_T_27 = cat(io_wdata_hi_9, io.out[0]) @[Cat.scala 30:58]
                io.wdata <= _io_wdata_T_27 @[mem.scala 277:16]
                skip @[mem.scala 276:27]
              else : @[mem.scala 278:32]
                node _T_35 = eq(masksel_1, UInt<1>("h01")) @[mem.scala 278:24]
                when _T_35 : @[mem.scala 278:32]
                  node _io_wdata_T_28 = bits(io.out[1], 7, 7) @[mem.scala 279:42]
                  node _io_wdata_T_29 = bits(_io_wdata_T_28, 0, 0) @[Bitwise.scala 72:15]
                  node io_wdata_hi_10 = mux(_io_wdata_T_29, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                  node _io_wdata_T_30 = cat(io_wdata_hi_10, io.out[1]) @[Cat.scala 30:58]
                  io.wdata <= _io_wdata_T_30 @[mem.scala 279:16]
                  skip @[mem.scala 278:32]
                else : @[mem.scala 280:32]
                  node _T_36 = eq(masksel_1, UInt<2>("h02")) @[mem.scala 280:24]
                  when _T_36 : @[mem.scala 280:32]
                    node _io_wdata_T_31 = bits(io.out[2], 7, 7) @[mem.scala 281:42]
                    node _io_wdata_T_32 = bits(_io_wdata_T_31, 0, 0) @[Bitwise.scala 72:15]
                    node io_wdata_hi_11 = mux(_io_wdata_T_32, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                    node _io_wdata_T_33 = cat(io_wdata_hi_11, io.out[2]) @[Cat.scala 30:58]
                    io.wdata <= _io_wdata_T_33 @[mem.scala 281:16]
                    skip @[mem.scala 280:32]
                  else : @[mem.scala 282:32]
                    node _T_37 = eq(masksel_1, UInt<2>("h03")) @[mem.scala 282:24]
                    when _T_37 : @[mem.scala 282:32]
                      node _io_wdata_T_34 = bits(io.out[3], 7, 7) @[mem.scala 283:42]
                      node _io_wdata_T_35 = bits(_io_wdata_T_34, 0, 0) @[Bitwise.scala 72:15]
                      node io_wdata_hi_12 = mux(_io_wdata_T_35, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                      node _io_wdata_T_36 = cat(io_wdata_hi_12, io.out[3]) @[Cat.scala 30:58]
                      io.wdata <= _io_wdata_T_36 @[mem.scala 283:16]
                      skip @[mem.scala 282:32]
              skip @[mem.scala 274:52]
            else : @[mem.scala 287:52]
              node _T_38 = bits(io.instruction, 14, 12) @[mem.scala 287:30]
              node _T_39 = eq(_T_38, UInt<3>("h05")) @[mem.scala 287:38]
              when _T_39 : @[mem.scala 287:52]
                node _T_40 = eq(masksel_1, UInt<1>("h00")) @[mem.scala 289:19]
                when _T_40 : @[mem.scala 289:27]
                  node _io_wdata_T_37 = bits(io.out[1], 7, 7) @[mem.scala 290:42]
                  node _io_wdata_T_38 = bits(_io_wdata_T_37, 0, 0) @[Bitwise.scala 72:15]
                  node io_wdata_hi_hi_4 = mux(_io_wdata_T_38, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                  node io_wdata_hi_13 = cat(io_wdata_hi_hi_4, io.out[1]) @[Cat.scala 30:58]
                  node _io_wdata_T_39 = cat(io_wdata_hi_13, io.out[0]) @[Cat.scala 30:58]
                  io.wdata <= _io_wdata_T_39 @[mem.scala 290:16]
                  skip @[mem.scala 289:27]
                else : @[mem.scala 291:32]
                  node _T_41 = eq(masksel_1, UInt<1>("h01")) @[mem.scala 291:24]
                  when _T_41 : @[mem.scala 291:32]
                    node _io_wdata_T_40 = bits(io.out[2], 7, 7) @[mem.scala 292:42]
                    node _io_wdata_T_41 = bits(_io_wdata_T_40, 0, 0) @[Bitwise.scala 72:15]
                    node io_wdata_hi_hi_5 = mux(_io_wdata_T_41, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                    node io_wdata_hi_14 = cat(io_wdata_hi_hi_5, io.out[2]) @[Cat.scala 30:58]
                    node _io_wdata_T_42 = cat(io_wdata_hi_14, io.out[1]) @[Cat.scala 30:58]
                    io.wdata <= _io_wdata_T_42 @[mem.scala 292:16]
                    skip @[mem.scala 291:32]
                  else : @[mem.scala 293:32]
                    node _T_42 = eq(masksel_1, UInt<2>("h02")) @[mem.scala 293:24]
                    when _T_42 : @[mem.scala 293:32]
                      node _io_wdata_T_43 = bits(io.out[3], 7, 7) @[mem.scala 294:42]
                      node _io_wdata_T_44 = bits(_io_wdata_T_43, 0, 0) @[Bitwise.scala 72:15]
                      node io_wdata_hi_hi_6 = mux(_io_wdata_T_44, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                      node io_wdata_hi_15 = cat(io_wdata_hi_hi_6, io.out[3]) @[Cat.scala 30:58]
                      node _io_wdata_T_45 = cat(io_wdata_hi_15, io.out[2]) @[Cat.scala 30:58]
                      io.wdata <= _io_wdata_T_45 @[mem.scala 294:16]
                      skip @[mem.scala 293:32]
                    else : @[mem.scala 295:32]
                      node _T_43 = eq(masksel_1, UInt<2>("h03")) @[mem.scala 295:24]
                      when _T_43 : @[mem.scala 295:32]
                        node _io_wdata_T_46 = bits(io.out[0], 7, 7) @[mem.scala 296:42]
                        node _io_wdata_T_47 = bits(_io_wdata_T_46, 0, 0) @[Bitwise.scala 72:15]
                        node io_wdata_hi_hi_7 = mux(_io_wdata_T_47, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                        node io_wdata_hi_16 = cat(io_wdata_hi_hi_7, io.out[0]) @[Cat.scala 30:58]
                        node _io_wdata_T_48 = cat(io_wdata_hi_16, io.out[3]) @[Cat.scala 30:58]
                        io.wdata <= _io_wdata_T_48 @[mem.scala 296:16]
                        skip @[mem.scala 295:32]
                skip @[mem.scala 287:52]
      skip @[mem.scala 233:38]
    
  module controlunit : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, func3_7 : UInt<3>, en_imem : UInt<1>, en_reg : UInt<1>, rd : UInt<5>, rs2 : UInt<5>, rs1 : UInt<5>, imm : UInt<12>}
    
    io.en_imem <= UInt<1>("h00") @[controlunit.scala 16:12]
    io.en_reg <= UInt<1>("h00") @[controlunit.scala 17:11]
    io.func3_7 <= UInt<1>("h00") @[controlunit.scala 18:12]
    node _T = bits(io.instruction, 6, 0) @[controlunit.scala 20:20]
    node _T_1 = eq(_T, UInt<6>("h033")) @[controlunit.scala 20:26]
    when _T_1 : @[controlunit.scala 21:1]
      node io_func3_7_hi = bits(io.instruction, 30, 30) @[controlunit.scala 22:35]
      node io_func3_7_lo = bits(io.instruction, 14, 12) @[controlunit.scala 22:54]
      node _io_func3_7_T = cat(io_func3_7_hi, io_func3_7_lo) @[Cat.scala 30:58]
      io.func3_7 <= _io_func3_7_T @[controlunit.scala 22:14]
      io.en_reg <= UInt<1>("h01") @[controlunit.scala 23:13]
      skip @[controlunit.scala 21:1]
    else : @[controlunit.scala 25:1]
      node _T_2 = bits(io.instruction, 6, 0) @[controlunit.scala 24:26]
      node _T_3 = eq(_T_2, UInt<5>("h013")) @[controlunit.scala 24:32]
      when _T_3 : @[controlunit.scala 25:1]
        node _io_func3_7_T_1 = bits(io.instruction, 14, 12) @[controlunit.scala 26:33]
        io.func3_7 <= _io_func3_7_T_1 @[controlunit.scala 26:16]
        node _T_4 = bits(io.instruction, 14, 12) @[controlunit.scala 27:24]
        node _T_5 = eq(_T_4, UInt<3>("h05")) @[controlunit.scala 27:33]
        when _T_5 : @[controlunit.scala 28:5]
          node io_func3_7_hi_1 = bits(io.instruction, 30, 30) @[controlunit.scala 29:39]
          node io_func3_7_lo_1 = bits(io.instruction, 14, 12) @[controlunit.scala 29:58]
          node _io_func3_7_T_2 = cat(io_func3_7_hi_1, io_func3_7_lo_1) @[Cat.scala 30:58]
          io.func3_7 <= _io_func3_7_T_2 @[controlunit.scala 29:18]
          skip @[controlunit.scala 28:5]
        io.en_reg <= UInt<1>("h01") @[controlunit.scala 31:15]
        skip @[controlunit.scala 25:1]
      else : @[controlunit.scala 33:1]
        node _T_6 = bits(io.instruction, 6, 0) @[controlunit.scala 32:26]
        node _T_7 = eq(_T_6, UInt<2>("h03")) @[controlunit.scala 32:32]
        when _T_7 : @[controlunit.scala 33:1]
          node _io_func3_7_T_3 = bits(io.instruction, 14, 12) @[controlunit.scala 34:33]
          io.func3_7 <= _io_func3_7_T_3 @[controlunit.scala 34:16]
          io.en_reg <= UInt<1>("h01") @[controlunit.scala 35:15]
          skip @[controlunit.scala 33:1]
        else : @[controlunit.scala 37:1]
          node _T_8 = bits(io.instruction, 6, 0) @[controlunit.scala 36:26]
          node _T_9 = eq(_T_8, UInt<6>("h023")) @[controlunit.scala 36:32]
          when _T_9 : @[controlunit.scala 37:1]
            node _io_func3_7_T_4 = bits(io.instruction, 14, 12) @[controlunit.scala 38:33]
            io.func3_7 <= _io_func3_7_T_4 @[controlunit.scala 38:16]
            io.en_reg <= UInt<1>("h00") @[controlunit.scala 39:15]
            skip @[controlunit.scala 37:1]
          else : @[controlunit.scala 40:44]
            node _T_10 = bits(io.instruction, 6, 0) @[controlunit.scala 40:26]
            node _T_11 = eq(_T_10, UInt<7>("h06f")) @[controlunit.scala 40:32]
            when _T_11 : @[controlunit.scala 40:44]
              io.en_reg <= UInt<1>("h01") @[controlunit.scala 41:13]
              skip @[controlunit.scala 40:44]
    node _io_rd_T = bits(io.instruction, 11, 7) @[controlunit.scala 44:25]
    io.rd <= _io_rd_T @[controlunit.scala 44:8]
    node _io_rs1_T = bits(io.instruction, 19, 15) @[controlunit.scala 45:26]
    io.rs1 <= _io_rs1_T @[controlunit.scala 45:9]
    node _io_rs2_T = bits(io.instruction, 24, 20) @[controlunit.scala 46:26]
    io.rs2 <= _io_rs2_T @[controlunit.scala 46:9]
    node _io_imm_T = bits(io.instruction, 31, 20) @[controlunit.scala 47:26]
    io.imm <= _io_imm_T @[controlunit.scala 47:9]
    
  module immgenr : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, imm : UInt<32>}
    
    io.imm <= UInt<1>("h00") @[immgenr.scala 23:10]
    node opcode = bits(io.instruction, 6, 0) @[immgenr.scala 24:30]
    node _T = eq(UInt<5>("h013"), opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _io_imm_T = bits(io.instruction, 31, 31) @[immgenr.scala 27:44]
      node _io_imm_T_1 = bits(_io_imm_T, 0, 0) @[Bitwise.scala 72:15]
      node io_imm_hi = mux(_io_imm_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
      node io_imm_lo = bits(io.instruction, 31, 20) @[immgenr.scala 27:65]
      node _io_imm_T_2 = cat(io_imm_hi, io_imm_lo) @[Cat.scala 30:58]
      io.imm <= _io_imm_T_2 @[immgenr.scala 27:14]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h03"), opcode) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _io_imm_T_3 = bits(io.instruction, 31, 31) @[immgenr.scala 30:44]
        node _io_imm_T_4 = bits(_io_imm_T_3, 0, 0) @[Bitwise.scala 72:15]
        node io_imm_hi_1 = mux(_io_imm_T_4, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
        node io_imm_lo_1 = bits(io.instruction, 31, 20) @[immgenr.scala 30:65]
        node _io_imm_T_5 = cat(io_imm_hi_1, io_imm_lo_1) @[Cat.scala 30:58]
        io.imm <= _io_imm_T_5 @[immgenr.scala 30:14]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<6>("h023"), opcode) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _io_imm_T_6 = bits(io.instruction, 31, 31) @[immgenr.scala 33:44]
          node _io_imm_T_7 = bits(_io_imm_T_6, 0, 0) @[Bitwise.scala 72:15]
          node io_imm_hi_hi = mux(_io_imm_T_7, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
          node io_imm_hi_lo = bits(io.instruction, 31, 25) @[immgenr.scala 33:65]
          node io_imm_lo_2 = bits(io.instruction, 11, 7) @[immgenr.scala 33:89]
          node io_imm_hi_2 = cat(io_imm_hi_hi, io_imm_hi_lo) @[Cat.scala 30:58]
          node _io_imm_T_8 = cat(io_imm_hi_2, io_imm_lo_2) @[Cat.scala 30:58]
          io.imm <= _io_imm_T_8 @[immgenr.scala 33:14]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<7>("h063"), opcode) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            node _io_imm_T_9 = bits(io.instruction, 31, 31) @[immgenr.scala 36:44]
            node _io_imm_T_10 = bits(_io_imm_T_9, 0, 0) @[Bitwise.scala 72:15]
            node io_imm_hi_hi_hi = mux(_io_imm_T_10, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
            node io_imm_hi_hi_lo = bits(io.instruction, 31, 31) @[immgenr.scala 36:65]
            node io_imm_hi_lo_1 = bits(io.instruction, 7, 7) @[immgenr.scala 36:85]
            node io_imm_lo_hi_hi = bits(io.instruction, 30, 25) @[immgenr.scala 36:104]
            node io_imm_lo_hi_lo = bits(io.instruction, 11, 8) @[immgenr.scala 36:127]
            node io_imm_lo_hi = cat(io_imm_lo_hi_hi, io_imm_lo_hi_lo) @[Cat.scala 30:58]
            node io_imm_lo_3 = cat(io_imm_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
            node io_imm_hi_hi_1 = cat(io_imm_hi_hi_hi, io_imm_hi_hi_lo) @[Cat.scala 30:58]
            node io_imm_hi_3 = cat(io_imm_hi_hi_1, io_imm_hi_lo_1) @[Cat.scala 30:58]
            node _io_imm_T_11 = cat(io_imm_hi_3, io_imm_lo_3) @[Cat.scala 30:58]
            io.imm <= _io_imm_T_11 @[immgenr.scala 36:14]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<6>("h037"), opcode) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              node io_imm_hi_4 = bits(io.instruction, 31, 12) @[immgenr.scala 40:35]
              node io_imm_lo_4 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
              node _io_imm_T_12 = cat(io_imm_hi_4, io_imm_lo_4) @[Cat.scala 30:58]
              io.imm <= _io_imm_T_12 @[immgenr.scala 40:14]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<32>("h017"), opcode) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                node io_imm_hi_5 = bits(io.instruction, 31, 12) @[immgenr.scala 43:35]
                node io_imm_lo_5 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
                node _io_imm_T_13 = cat(io_imm_hi_5, io_imm_lo_5) @[Cat.scala 30:58]
                io.imm <= _io_imm_T_13 @[immgenr.scala 43:14]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<32>("h06f"), opcode) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  node _io_imm_T_14 = bits(io.instruction, 31, 31) @[immgenr.scala 49:44]
                  node _io_imm_T_15 = bits(_io_imm_T_14, 0, 0) @[Bitwise.scala 72:15]
                  node io_imm_hi_hi_hi_1 = mux(_io_imm_T_15, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
                  node io_imm_hi_hi_lo_1 = bits(io.instruction, 31, 31) @[immgenr.scala 49:65]
                  node io_imm_hi_lo_2 = bits(io.instruction, 19, 12) @[immgenr.scala 49:85]
                  node io_imm_lo_hi_hi_1 = bits(io.instruction, 20, 20) @[immgenr.scala 49:109]
                  node io_imm_lo_hi_lo_1 = bits(io.instruction, 30, 21) @[immgenr.scala 49:129]
                  node io_imm_lo_hi_1 = cat(io_imm_lo_hi_hi_1, io_imm_lo_hi_lo_1) @[Cat.scala 30:58]
                  node io_imm_lo_6 = cat(io_imm_lo_hi_1, UInt<1>("h00")) @[Cat.scala 30:58]
                  node io_imm_hi_hi_2 = cat(io_imm_hi_hi_hi_1, io_imm_hi_hi_lo_1) @[Cat.scala 30:58]
                  node io_imm_hi_6 = cat(io_imm_hi_hi_2, io_imm_hi_lo_2) @[Cat.scala 30:58]
                  node _io_imm_T_16 = cat(io_imm_hi_6, io_imm_lo_6) @[Cat.scala 30:58]
                  io.imm <= _io_imm_T_16 @[immgenr.scala 49:14]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<32>("h067"), opcode) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    node _io_imm_T_17 = bits(io.instruction, 31, 31) @[immgenr.scala 53:44]
                    node _io_imm_T_18 = bits(_io_imm_T_17, 0, 0) @[Bitwise.scala 72:15]
                    node io_imm_hi_7 = mux(_io_imm_T_18, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                    node io_imm_lo_7 = bits(io.instruction, 31, 20) @[immgenr.scala 53:65]
                    node _io_imm_T_19 = cat(io_imm_hi_7, io_imm_lo_7) @[Cat.scala 30:58]
                    io.imm <= _io_imm_T_19 @[immgenr.scala 53:14]
                    skip @[Conditional.scala 39:67]
    
  module registerfile : 
    input clock : Clock
    input reset : Reset
    output io : {flip raddr1 : UInt<5>, flip raddr2 : UInt<5>, rdata1 : UInt<32>, rdata2 : UInt<32>, flip wen : UInt<1>, flip waddr : UInt<5>, flip wdata : UInt<32>}
    
    reg regs : UInt<32>[32], clock @[registerfile.scala 14:16]
    node _io_rdata1_T = orr(io.raddr1) @[registerfile.scala 15:37]
    node _io_rdata1_T_1 = mux(_io_rdata1_T, regs[io.raddr1], UInt<1>("h00")) @[registerfile.scala 15:20]
    io.rdata1 <= _io_rdata1_T_1 @[registerfile.scala 15:13]
    node _io_rdata2_T = orr(io.raddr2) @[registerfile.scala 16:37]
    node _io_rdata2_T_1 = mux(_io_rdata2_T, regs[io.raddr2], UInt<1>("h00")) @[registerfile.scala 16:20]
    io.rdata2 <= _io_rdata2_T_1 @[registerfile.scala 16:13]
    node _T = orr(io.waddr) @[registerfile.scala 17:32]
    node _T_1 = and(io.wen, _T) @[registerfile.scala 17:17]
    when _T_1 : @[registerfile.scala 17:38]
      regs[io.waddr] <= io.wdata @[registerfile.scala 18:25]
      skip @[registerfile.scala 17:38]
    
  module decode : 
    input clock : Clock
    input reset : Reset
    output io : {rdata1 : UInt<32>, rdata2 : UInt<32>, flip wdata : UInt<32>, flip instructioncu : UInt<32>, func3_7 : UInt<4>, en_imem : UInt<1>, immg : UInt<32>}
    
    inst cumod of controlunit @[decode.scala 44:19]
    cumod.clock <= clock
    cumod.reset <= reset
    inst immg of immgenr @[decode.scala 45:18]
    immg.clock <= clock
    immg.reset <= reset
    inst regfmod of registerfile @[decode.scala 46:21]
    regfmod.clock <= clock
    regfmod.reset <= reset
    regfmod.io.raddr1 <= cumod.io.rs1 @[decode.scala 50:19]
    regfmod.io.raddr2 <= cumod.io.rs2 @[decode.scala 51:19]
    regfmod.io.waddr <= cumod.io.rd @[decode.scala 52:18]
    cumod.io.instruction <= io.instructioncu @[decode.scala 56:21]
    io.func3_7 <= cumod.io.func3_7 @[decode.scala 57:11]
    io.en_imem <= cumod.io.en_imem @[decode.scala 58:12]
    io.rdata1 <= regfmod.io.rdata1 @[decode.scala 68:11]
    io.rdata2 <= regfmod.io.rdata2 @[decode.scala 69:11]
    regfmod.io.wen <= cumod.io.en_reg @[decode.scala 70:15]
    regfmod.io.wdata <= io.wdata @[decode.scala 72:17]
    immg.io.instruction <= io.instructioncu @[decode.scala 78:20]
    io.immg <= immg.io.imm @[decode.scala 80:8]
    
  module topcore : 
    input clock : Clock
    input reset : Reset
    output io : {enable : UInt<1>, address : UInt<32>, flip instruction_input : UInt<32>, addr : UInt<8>, rd_enable : UInt<1>, wr_enable : UInt<1>, mask : UInt<1>[4], dataIn : UInt<8>[4], flip datamemout : UInt<32>[4], pcout : UInt<32>}
    
    inst fetchmod of fetch @[topcore.scala 30:22]
    fetchmod.clock <= clock
    fetchmod.reset <= reset
    inst executemod of execute @[topcore.scala 32:24]
    executemod.clock <= clock
    executemod.reset <= reset
    inst wbmod of wb @[topcore.scala 34:18]
    wbmod.clock <= clock
    wbmod.reset <= reset
    inst memmod of mem @[topcore.scala 37:20]
    memmod.clock <= clock
    memmod.reset <= reset
    inst decodemod of decode @[topcore.scala 39:23]
    decodemod.clock <= clock
    decodemod.reset <= reset
    io.enable <= UInt<1>("h00") @[topcore.scala 90:12]
    io.address <= fetchmod.io.pcout @[topcore.scala 92:12]
    decodemod.io.instructioncu <= io.instruction_input @[topcore.scala 95:29]
    executemod.io.A <= decodemod.io.rdata1 @[topcore.scala 98:16]
    executemod.io.B <= decodemod.io.rdata2 @[topcore.scala 99:16]
    executemod.io.rdata1 <= decodemod.io.rdata1 @[topcore.scala 100:21]
    executemod.io.rdata2 <= decodemod.io.rdata2 @[topcore.scala 101:21]
    executemod.io.op <= decodemod.io.func3_7 @[topcore.scala 102:17]
    executemod.io.instructioncu <= decodemod.io.instructioncu @[topcore.scala 103:28]
    executemod.io.func3_7 <= decodemod.io.func3_7 @[topcore.scala 104:22]
    executemod.io.immg <= decodemod.io.immg @[topcore.scala 105:19]
    executemod.io.pcout <= fetchmod.io.pcout @[topcore.scala 106:20]
    fetchmod.io.imm <= executemod.io.aluout @[topcore.scala 109:16]
    fetchmod.io.jump <= executemod.io.pcjump @[topcore.scala 110:17]
    fetchmod.io.jump2 <= executemod.io.pcjump2 @[topcore.scala 111:18]
    fetchmod.io.jump3 <= executemod.io.pcjump3 @[topcore.scala 112:18]
    memmod.io.aluout <= executemod.io.addr @[topcore.scala 113:17]
    io.rd_enable <= UInt<1>("h00") @[topcore.scala 125:15]
    io.wr_enable <= UInt<1>("h00") @[topcore.scala 126:15]
    node _T = bits(io.instruction_input, 6, 0) @[topcore.scala 127:26]
    node _T_1 = eq(_T, UInt<2>("h03")) @[topcore.scala 127:32]
    when _T_1 : @[topcore.scala 128:1]
      io.rd_enable <= UInt<1>("h01") @[topcore.scala 129:17]
      skip @[topcore.scala 128:1]
    else : @[topcore.scala 131:1]
      node _T_2 = bits(io.instruction_input, 6, 0) @[topcore.scala 130:33]
      node _T_3 = eq(_T_2, UInt<6>("h023")) @[topcore.scala 130:38]
      when _T_3 : @[topcore.scala 131:1]
        io.wr_enable <= UInt<1>("h01") @[topcore.scala 132:17]
        skip @[topcore.scala 131:1]
    memmod.io.instruction <= io.instruction_input @[topcore.scala 135:22]
    memmod.io.out[0] <= io.datamemout[0] @[topcore.scala 137:15]
    memmod.io.out[1] <= io.datamemout[1] @[topcore.scala 137:15]
    memmod.io.out[2] <= io.datamemout[2] @[topcore.scala 137:15]
    memmod.io.out[3] <= io.datamemout[3] @[topcore.scala 137:15]
    executemod.io.A <= memmod.io.A @[topcore.scala 140:16]
    executemod.io.B <= memmod.io.B @[topcore.scala 141:16]
    executemod.io.op <= memmod.io.op @[topcore.scala 142:17]
    memmod.io.aluout <= executemod.io.aluout @[topcore.scala 144:17]
    memmod.io.imm <= decodemod.io.immg @[topcore.scala 146:14]
    memmod.io.rdata1 <= decodemod.io.rdata1 @[topcore.scala 149:18]
    memmod.io.rdata2 <= decodemod.io.rdata2 @[topcore.scala 151:17]
    decodemod.io.wdata <= memmod.io.wdata @[topcore.scala 153:19]
    wbmod.io.ins <= io.instruction_input @[topcore.scala 156:17]
    node _decodemod_io_wdata_T = bits(io.instruction_input, 6, 0) @[topcore.scala 158:46]
    node _decodemod_io_wdata_T_1 = eq(_decodemod_io_wdata_T, UInt<2>("h03")) @[topcore.scala 158:51]
    node _decodemod_io_wdata_T_2 = mux(_decodemod_io_wdata_T_1, wbmod.io.dataout, executemod.io.wdata) @[topcore.scala 158:25]
    decodemod.io.wdata <= _decodemod_io_wdata_T_2 @[topcore.scala 158:19]
    node wbmod_io_datamemin_lo = cat(io.datamemout[1], io.datamemout[0]) @[Cat.scala 30:58]
    node wbmod_io_datamemin_hi = cat(io.datamemout[3], io.datamemout[2]) @[Cat.scala 30:58]
    node _wbmod_io_datamemin_T = cat(wbmod_io_datamemin_hi, wbmod_io_datamemin_lo) @[Cat.scala 30:58]
    wbmod.io.datamemin <= _wbmod_io_datamemin_T @[topcore.scala 163:21]
    io.pcout <= fetchmod.io.pcout @[topcore.scala 167:9]
    decodemod.io.instructioncu <= io.instruction_input @[topcore.scala 169:29]
    io.addr <= memmod.io.addr @[topcore.scala 174:8]
    io.mask[0] <= memmod.io.mask[0] @[topcore.scala 177:8]
    io.mask[1] <= memmod.io.mask[1] @[topcore.scala 177:8]
    io.mask[2] <= memmod.io.mask[2] @[topcore.scala 177:8]
    io.mask[3] <= memmod.io.mask[3] @[topcore.scala 177:8]
    io.dataIn[0] <= memmod.io.dataIn[0] @[topcore.scala 178:10]
    io.dataIn[1] <= memmod.io.dataIn[1] @[topcore.scala 178:10]
    io.dataIn[2] <= memmod.io.dataIn[2] @[topcore.scala 178:10]
    io.dataIn[3] <= memmod.io.dataIn[3] @[topcore.scala 178:10]
    
  module maintop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip imem_dataIn : UInt<32>, main_top_out : UInt<32>}
    
    inst inmmod of Imem @[maintop.scala 13:21]
    inmmod.clock <= clock
    inmmod.reset <= reset
    inst dmmod of datamemory @[maintop.scala 14:19]
    dmmod.clock <= clock
    dmmod.reset <= reset
    inst topcoremod of topcore @[maintop.scala 16:25]
    topcoremod.clock <= clock
    topcoremod.reset <= reset
    inmmod.io.data_in <= io.imem_dataIn @[maintop.scala 19:18]
    inmmod.io.enable <= topcoremod.io.enable @[maintop.scala 20:17]
    inmmod.io.address <= topcoremod.io.pcout @[maintop.scala 21:18]
    topcoremod.io.instruction_input <= inmmod.io.out @[maintop.scala 23:33]
    dmmod.io.addr <= topcoremod.io.addr @[maintop.scala 27:14]
    dmmod.io.rd_enable <= topcoremod.io.rd_enable @[maintop.scala 28:19]
    dmmod.io.wr_enable <= topcoremod.io.wr_enable @[maintop.scala 29:19]
    dmmod.io.dataIn[0] <= topcoremod.io.dataIn[0] @[maintop.scala 30:16]
    dmmod.io.dataIn[1] <= topcoremod.io.dataIn[1] @[maintop.scala 30:16]
    dmmod.io.dataIn[2] <= topcoremod.io.dataIn[2] @[maintop.scala 30:16]
    dmmod.io.dataIn[3] <= topcoremod.io.dataIn[3] @[maintop.scala 30:16]
    topcoremod.io.datamemout[0] <= dmmod.io.out[0] @[maintop.scala 31:25]
    topcoremod.io.datamemout[1] <= dmmod.io.out[1] @[maintop.scala 31:25]
    topcoremod.io.datamemout[2] <= dmmod.io.out[2] @[maintop.scala 31:25]
    topcoremod.io.datamemout[3] <= dmmod.io.out[3] @[maintop.scala 31:25]
    dmmod.io.mask[0] <= topcoremod.io.mask[0] @[maintop.scala 32:14]
    dmmod.io.mask[1] <= topcoremod.io.mask[1] @[maintop.scala 32:14]
    dmmod.io.mask[2] <= topcoremod.io.mask[2] @[maintop.scala 32:14]
    dmmod.io.mask[3] <= topcoremod.io.mask[3] @[maintop.scala 32:14]
    node _io_main_top_out_T = cat(topcoremod.io.dataIn[3], topcoremod.io.dataIn[2]) @[maintop.scala 35:44]
    node _io_main_top_out_T_1 = cat(_io_main_top_out_T, topcoremod.io.dataIn[1]) @[maintop.scala 35:71]
    node _io_main_top_out_T_2 = cat(_io_main_top_out_T_1, topcoremod.io.dataIn[0]) @[maintop.scala 36:44]
    io.main_top_out <= _io_main_top_out_T_2 @[maintop.scala 35:17]
    
